package org.quadrifolium.server;

import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;

import java.util.HashMap;
import java.util.Map;

import com.mysql.jdbc.Connection;
import com.mysql.jdbc.Statement;

public class DBConnector 
{	
	private Connection        _conn     = null ;
	private Statement         _stmt     = null ;
	private PreparedStatement _prepStmt = null ;
	private ResultSet         _rs       = null ;
	private String            _sUserId  = "" ;
	
	private Boolean           _bSimpleMode = false ;
	
	public  enum databaseType { databaseCore, databaseOntology } ;
	private databaseType      _databaseType ;
	
	/**
	 * Default constructor (uses databaseLdv as databaseType)
	 * 
	 * @param bMode   <code>true</code> for simple mode (where a simple statement is automatically initialized)
	 * @param sUserId User Id
	 * 
	 **/
	public DBConnector(Boolean bMode, final String sUserId) {
		set(bMode, sUserId, databaseType.databaseOntology) ;
	}
	
	/**
	 * Constructor used when the user has (not yet) a LdV identifier (uses databaseLdv as databaseType)
	 * 
	 * @param bMode <code>true</code> for simple mode (where a simple statement is automatically initialized)
	 * @param iUserId User Id
	 * 
	 **/
	public DBConnector(Boolean bMode, int iUserId)
	{
		if (iUserId >= 0)
			set(bMode, Integer.toString(iUserId), databaseType.databaseOntology) ;
		else
			set(bMode, "", databaseType.databaseOntology) ;
	}
	
	/**
	 * Constructor that specifies databaseType
	 * 
	 * @param bMode    true for simple mode (where a simple statement is automatically initialized)
	 * @param iUserId  User Id
	 * @param database databaseCore or databaseOntology
	 * 
	 **/
	public DBConnector(Boolean bMode, int iUserId, databaseType database)
	{
		if (iUserId >= 0)
			set(bMode, Integer.toString(iUserId), database) ;
		else
			set(bMode, "", database) ;
	}
	
	/**
	 * Initialize main information
	 * 
	 **/
	private void set(final Boolean bMode, final String sUserId, final databaseType database)
	{
		_bSimpleMode  = bMode ;
		_sUserId      = sUserId ;
		_databaseType = database ;
		
		init() ;
		
		if (_bSimpleMode)
			initStatememt() ;
	}
	
	/**
	 * Database connection
	 * 
	 **/
	private void init()
	{
		try
		{
			Class.forName("com.mysql.jdbc.Driver") ;
			trace("Success loading Mysql Driver", Logger.TraceLevel.STEP) ;
		}
		catch(Exception e)
		{
			trace("Error Loading Mysql Driver", Logger.TraceLevel.ERROR) ;
			e.printStackTrace() ;
		}
		
		try
		{
			// Example: //localhost:3306/ldv_admin
			//
			String sAddress = "//" + DbParameters.getIP() + ":" + DbParameters.getPort() + "/" ;
			
			switch (_databaseType) 
			{
				case databaseCore : 
					sAddress += DbParameters.getBase() ;
					break ;
				case databaseOntology : 
					sAddress += DbParameters.getBaseOntology() ;
					break ;
			}
			
			_conn = (Connection) DriverManager.getConnection("jdbc:mysql:" + sAddress, 
					                                             DbParameters.getUser(), 
					                                             DbParameters.getPass()) ;
			trace("Success connect to database " + sAddress, Logger.TraceLevel.DETAIL) ;
		}
		catch(SQLException ex)
		{
			//handle any errors
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR) ;
			trace("SQLState:" + ex.getSQLState(),    Logger.TraceLevel.ERROR) ;
			trace("Error:" +ex.getErrorCode(),       Logger.TraceLevel.ERROR) ;
		}
		catch(Exception e)
		{
			trace("Error connecting to database", Logger.TraceLevel.ERROR) ;
			e.printStackTrace() ;
		}
	}
	
	/**
	 * Initialize a classical statement 
	 * 
	 **/
	private void initStatememt()
	{
		if (null == _conn)
		{
			trace("DBConnector.initStatememt: Null connector", Logger.TraceLevel.ERROR) ;
			return ;
		}
		try
		{
			_stmt = (Statement) _conn.createStatement() ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.initStatememt: createStatement failed", Logger.TraceLevel.ERROR) ;
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR);
			trace("SQLState:" + ex.getSQLState(), Logger.TraceLevel.ERROR);
			trace("Error:" +ex.getErrorCode(), Logger.TraceLevel.ERROR);
		}	
	}
	
	public void prepareStatememt(String sPreparedStatementText, int iAutoGeneratedKeys)
	{
		if (null == _conn)
		{
			trace("DBConnector.prepareStatememt: Null connector", Logger.TraceLevel.ERROR) ;
			return ;
		}
		try
		{
			_prepStmt = _conn.prepareStatement(sPreparedStatementText, iAutoGeneratedKeys) ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.prepareStatememt: prepareStatement failed", Logger.TraceLevel.ERROR) ;
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR);
			trace("SQLState:" + ex.getSQLState(), Logger.TraceLevel.ERROR);
			trace("Error:" +ex.getErrorCode(), Logger.TraceLevel.ERROR);
		}	
	}
	
	/**
	 * Create a prepared statement for a query that can return a big result set
	 * 
	 * @param sPreparedStatementText Query text
	 */
	public void prepareStatememtForBigResult(String sPreparedStatementText)
	{
		if (null == _conn)
		{
			trace("DBConnector.prepareStatememt: Null connector", Logger.TraceLevel.ERROR) ;
			return ;
		}
		try
		{
			_prepStmt = _conn.prepareStatement(sPreparedStatementText, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY) ;
			_prepStmt.setFetchSize(Integer.MIN_VALUE) ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.prepareStatememt: prepareStatement failed", Logger.TraceLevel.ERROR) ;
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR);
			trace("SQLState:" + ex.getSQLState(), Logger.TraceLevel.ERROR);
			trace("Error:" +ex.getErrorCode(), Logger.TraceLevel.ERROR);
		}	
	}
	
	public void setStatememtString(int iIndex, String sStatementString)
	{
		if (null == _prepStmt)
		{
			trace("DBConnector.setStatememtString: Null preparedStatement", Logger.TraceLevel.ERROR) ;
			return ;
		}
		try
		{
			_prepStmt.setString(iIndex, sStatementString) ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.setStatememtString: setString failed", Logger.TraceLevel.ERROR) ;
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR);
			trace("SQLState:" + ex.getSQLState(), Logger.TraceLevel.ERROR);
			trace("Error:" +ex.getErrorCode(), Logger.TraceLevel.ERROR);
		}	
	}
	
	public void setStatememtInt(int iIndex, int iStatementInt)
	{
		if (null == _prepStmt)
		{
			trace("DBConnector.setStatememtInt: Null preparedStatement", Logger.TraceLevel.ERROR) ;
			return ;
		}
		try
		{
			_prepStmt.setInt(iIndex, iStatementInt) ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.setStatememtInt: setInt failed", Logger.TraceLevel.ERROR) ;
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR);
			trace("SQLState:" + ex.getSQLState(), Logger.TraceLevel.ERROR);
			trace("Error:" +ex.getErrorCode(), Logger.TraceLevel.ERROR);
		}	
	}
	
	public void setStatememtFloat(int iIndex, float fStatementFloat)
	{
		if (null == _prepStmt)
		{
			trace("setStatememtFloat: Null preparedStatement", Logger.TraceLevel.ERROR) ;
			return ;
		}
		try
		{
			_prepStmt.setFloat(iIndex, fStatementFloat) ;
		}
		catch(SQLException ex)
		{
			trace("setStatememtFloat: setFloat failed", Logger.TraceLevel.ERROR) ;
			trace("SQLException:" + ex.getMessage(), Logger.TraceLevel.ERROR);
			trace("SQLState:" + ex.getSQLState(), Logger.TraceLevel.ERROR);
			trace("Error:" +ex.getErrorCode(), Logger.TraceLevel.ERROR);
		}	
	}
	
	public boolean executePreparedStatement()
	{		
		if (null == _prepStmt)
		{
			trace("DBConnector.executePreparedStatement: Null preparedStatement", Logger.TraceLevel.ERROR) ;
			return false ;
		}
        
		try
		{        
			_rs = _prepStmt.executeQuery() ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.executePreparedStatement: Query failed: " + _prepStmt.toString(), Logger.TraceLevel.ERROR) ;
			trace("SQLException: " + ex.getMessage(), Logger.TraceLevel.ERROR) ;
			trace("SQLState: " + ex.getSQLState(), Logger.TraceLevel.ERROR) ;
			trace("VendorError: " +ex.getErrorCode(), Logger.TraceLevel.ERROR) ;
			return false ;
		}
		
		return true ;
	}
	
	/**
	 * Execute a classical query 
	 * 
	 * @param sQuery SQL query
	 * @return true if successful
	 * 
	 **/
	public boolean executeQuery(String sQuery)
	{		
		if (null == _stmt)
		{
			trace("DBConnector.executeQuery: Null statement", Logger.TraceLevel.ERROR) ;
			return false ;
		}
        
		try
		{        
			_rs = _stmt.executeQuery(sQuery) ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.executeQuery: Query failed: " + sQuery, Logger.TraceLevel.ERROR) ;
			trace("SQLException: " + ex.getMessage(), Logger.TraceLevel.ERROR) ;
			trace("SQLState: " + ex.getSQLState(), Logger.TraceLevel.ERROR) ;
			trace("VendorError: " +ex.getErrorCode(), Logger.TraceLevel.ERROR) ;
			return false ;
		}
		
		return true ;
	}
		
	/**
	 * Do "executeUpdate" for a prepared statement 
	 * 
	 * @param bReturnGeneratedKeys : if true, then execute getGeneratedKeys
	 * @return Number of affected rows
	 * 
	 **/
	public int executeUpdatePreparedStatement(boolean bReturnGeneratedKeys)
	{		
		int iNbAffectedRow = -1 ;
		
		if (null == _prepStmt)
		{
			trace("DBConnector.executeUpdatePreparedStatement: Null preparedStatement", Logger.TraceLevel.ERROR) ;
			return iNbAffectedRow ;
		}
        
		try
		{   
			iNbAffectedRow = _prepStmt.executeUpdate() ;
			if ((iNbAffectedRow > 0) && bReturnGeneratedKeys)
				_rs = _prepStmt.getGeneratedKeys() ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.executeUpdatePreparedStatement: Query failed: " + _prepStmt.toString(), Logger.TraceLevel.ERROR) ;
			trace("SQLException: " + ex.getMessage(), Logger.TraceLevel.ERROR) ;
			trace("SQLState: " + ex.getSQLState(), Logger.TraceLevel.ERROR) ;
			trace("VendorError: " +ex.getErrorCode(), Logger.TraceLevel.ERROR) ;
			return -1 ;
		}
		
		return iNbAffectedRow ;
	}
	
	public int executeUpdateQuery(String sQuery, boolean bReturnGeneratedKeys)
	{		
		int iNbAffectedRow = -1 ;
		
		if (null == _stmt)
		{
			trace("DBConnector.executeUpdateQuery: Null statement", Logger.TraceLevel.ERROR) ;
			return iNbAffectedRow ;
		}
        
		try
		{        
			if (bReturnGeneratedKeys)
			{
				iNbAffectedRow = _stmt.executeUpdate(sQuery, Statement.RETURN_GENERATED_KEYS) ;
				_rs = _stmt.getGeneratedKeys() ;
			}
			else
				iNbAffectedRow = _stmt.executeUpdate(sQuery) ;
		}
		catch(SQLException ex)
		{
			trace("DBConnector.executeUpdateQuery: Query failed: " + sQuery, Logger.TraceLevel.ERROR) ;
			trace("SQLException: " + ex.getMessage(), Logger.TraceLevel.ERROR) ;
			trace("SQLState: " + ex.getSQLState(), Logger.TraceLevel.ERROR) ;
			trace("VendorError: " +ex.getErrorCode(), Logger.TraceLevel.ERROR) ;
			return -1 ;
		}
		
		return iNbAffectedRow ;
	}
	
	public Map<String, String> dbSelectPreparedStatement() throws SQLException
	{		
		if (null == _prepStmt)
		{
			trace("DBConnector.dbSelectPreparedStatement: Null preparedStatement", Logger.TraceLevel.ERROR) ;
			return null ;
		}
		
		//ArrayList<Map> selectResult = new ArrayList<Map>();
		Map<String, String> recordInfo = null ;
        
		_rs = _prepStmt.executeQuery() ;
		if (_rs.next())
		{
			recordInfo = new HashMap<String, String>(); 
                
			ResultSetMetaData rsMetaData = _rs.getMetaData() ;
      int numberOfColumns = rsMetaData.getColumnCount() ;
      for (int i = 1 ; i <= numberOfColumns ; ++i)
      {
      	String sColName = rsMetaData.getColumnName(i) ;
      	recordInfo.put(sColName, _rs.getString(sColName)) ;
      }
      // selectResult.add(recordInfo);*/
      // recordInfo = new HashMap<String, String>() ;
			// recordInfo.put(rs.getString("pseudo"), rs.getString("password")) ;
		}
			
		closeResultSet() ;
			
		// rs.close() ; //close the ResultSet
		// stmt.close() ; //close the statement

		return recordInfo ;
	}
	
	public Map<String, String> dbSelect(String selectSql)
	{		
		if (null == _stmt)
		{
			trace("DBConnector.dbSelect: Null statement", Logger.TraceLevel.ERROR) ;
			return null ;
		}
		
		//ArrayList<Map> selectResult = new ArrayList<Map>();
		Map<String, String> recordInfo = null ;
        
		try
		{        
			_rs = _stmt.executeQuery(selectSql) ;
			if (_rs.next())
			{
        recordInfo = new HashMap<String, String>(); 
                
        ResultSetMetaData rsMetaData = _rs.getMetaData() ;
        int numberOfColumns = rsMetaData.getColumnCount() ;
        for (int i = 1 ; i <= numberOfColumns ; ++i)
        {
        	String sColName = rsMetaData.getColumnName(i) ;
        	recordInfo.put(sColName, _rs.getString(sColName)) ;
        }
        // selectResult.add(recordInfo);*/
				// recordInfo = new HashMap<String, String>() ;
				// recordInfo.put(rs.getString("pseudo"), rs.getString("password")) ;
			}
			
			closeResultSet() ;
			
			// rs.close() ; //close the ResultSet
			// stmt.close() ; //close the statement
		}
		catch(SQLException ex)
		{
			trace("DBConnector.dbSelect: executeQuery failed for query " + selectSql, Logger.TraceLevel.ERROR) ;
			trace("SQLException: " + ex.getMessage(), Logger.TraceLevel.ERROR) ;
			trace("SQLState: " + ex.getSQLState(), Logger.TraceLevel.ERROR) ;
			trace("VendorError: " +ex.getErrorCode(), Logger.TraceLevel.ERROR) ;        
		}
		return recordInfo ;
	} //end dbSelect(...)
	
	public void closeAll()
	{
		closeResultSet() ;
		
		if (null != _stmt)
		{
			try
			{
				_stmt.close() ;
			}
			catch(SQLException sqlEx)
			{
				trace("DBConnector.closeAll when closing statement: " + sqlEx.getStackTrace(), Logger.TraceLevel.ERROR) ;
			}
		}
		
		closePreparedStatement() ;
		
		if (null != _conn)
		{
			try
			{
				_conn.close() ;
			}
			catch(SQLException sqlEx)
			{
				trace("DBConnector.closeAll when closing connexion: " + sqlEx.getStackTrace(), Logger.TraceLevel.ERROR) ;
			}
		}
	}
	
	public void closePreparedStatement()
	{
		if (null == _prepStmt)
			return ;
		
		try
		{
			if (_prepStmt.isClosed())
				return ;
		} 
		catch (SQLException sqlEx)
		{
			trace("DBConnector.closePreparedStatement: " + sqlEx.getStackTrace(), Logger.TraceLevel.ERROR) ;
		}
		
		try {
			_prepStmt.close() ;
			trace("DBConnector.closePreparedStatement: Prepared statement closed", Logger.TraceLevel.SUBDETAIL) ;
		}
		catch(SQLException sqlEx) 
		{
			trace("DBConnector.closePreparedStatement: " + sqlEx.getStackTrace(), Logger.TraceLevel.ERROR) ;
		}
	}
	
	public void closeResultSet()
	{
		if (null == _rs)
			return ;
		
		try
		{
			_rs.close() ;
		}
		catch(SQLException sqlEx)
		{
			trace("StackTrace when closing ResultSet: " + sqlEx.getStackTrace(), Logger.TraceLevel.ERROR) ;
		}
	}
	
	public Statement getStatement() {
		return _stmt ;
	}
	
	public PreparedStatement getPreparedStatement() {
		return _prepStmt ; 
	}
	
	public ResultSet getResultSet() {
		return _rs ; 
	}
	
	public Connection getConnection() {
		return _conn ; 
	}
	
	public void trace(String sTraceText, Logger.TraceLevel traceLevel) {
		Logger.trace(sTraceText, _sUserId, traceLevel) ;
	}
}
